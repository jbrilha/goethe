package db

import (
	"database/sql"
	"log"
	"time"

	"goethe/data"

	"github.com/lib/pq"
)

func InsertBlogPost(p *data.Post) (int, error) {
	tx, err := db.Begin()
	if err != nil {
		log.Println(err)
		return 0, err
	}

	defer tx.Rollback()

	query := `INSERT INTO post(creator, title, tags, content, created_at)
                VALUES($1, $2, $3, $4, $5)
                RETURNING id`

	err = tx.QueryRow(
		query,
		p.Creator,
		p.Title,
		pq.Array(p.Tags),
		p.Content,
		time.Now(),
	).Scan(
		&p.ID,
	)
	if err != nil {
		log.Println(err)
		return 0, err
	}

	if err = tx.Commit(); err != nil {
		log.Println(err)
		return 0, err
	}

	return p.ID, nil
}

func IncrPostViews(id int) error {
	tx, err := db.Begin()
	if err != nil {
		log.Println(err)
		return err
	}

	defer tx.Rollback()

	query := `UPDATE post SET views = views + 1 WHERE id = $1`

	_, err = tx.Exec(query, id)

	if err != nil {
		if err == sql.ErrNoRows {
			log.Printf("nooooooooo %d", id)
			return err
		}
		log.Println("wtf", id)
		return err
	}

	if err = tx.Commit(); err != nil {
		log.Println(err)
		return err
	}

	return nil
}

func GetBlogPost(id int) (data.Post, error) {
	query := `SELECT * FROM post WHERE id = $1`

	post := data.Post{}

	err := db.QueryRow(query, id).Scan(
		&post.ID,
		&post.Creator,
		&post.Title,
		pq.Array(&post.Tags),
		&post.Content,
		&post.Views,
		&post.CreatedAt,
	)

	if err != nil {
		if err == sql.ErrNoRows {
			log.Printf("nooooooooo %d", id)
			return data.Post{}, err
		}
		log.Println("wtf", id)
		return data.Post{}, err
	}

	return post, nil
}

func SearchPosts(search string) ([]data.Post, error) {
	query := `SELECT * FROM post WHERE
            (content ILIKE '%' || $1 || '%' OR title ILIKE '%' || $1 || '%') 
            ORDER BY created_at DESC`

	return getPosts(query, search)
}

func SearchPostsByCreator(creator string) ([]data.Post, error) {
	query := `SELECT * FROM post WHERE creator ILIKE '%' || $1 || '%' ORDER BY created_at DESC`

	log.Println(creator)
	return getPosts(query, creator)
}

func SearchPostsByTag(tag string) ([]data.Post, error) {
	query := `SELECT * FROM post WHERE $1 = ANY(tags) ORDER BY created_at DESC`

	return getPosts(query, tag)
}

func GetBlogPosts() ([]data.Post, error) {
	query := `SELECT * FROM post ORDER BY created_at DESC`

	return getPosts(query)
}

func getPosts(query string, args ...any) ([]data.Post, error) {
	rows, err := db.Query(query, args...)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Println("nooooooooo roooooooooooows")
		}
		log.Println(err)
	}

	defer rows.Close()

	posts := []data.Post{}

	for rows.Next() {
		var post data.Post
		err := rows.Scan(
			&post.ID,
			&post.Creator,
			&post.Title,
			pq.Array(&post.Tags),
			&post.Content,
			&post.Views,
			&post.CreatedAt,
		)
		if err != nil {
			log.Println(err)
		}

		posts = append(posts, post)
	}

	return posts, nil
}

func createPostTable() {
	// db.Exec("DROP TABLE post")
	query := `CREATE TABLE IF NOT EXISTS post(
                id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                creator VARCHAR NOT NULL,
                title VARCHAR NOT NULL,
                tags VARCHAR ARRAY,
                content TEXT NOT NULL,
                views INT DEFAULT 0,
                created_at timestamp NOT NULL
    )`

	_, err := db.Exec(query)
	if err != nil {
		log.Println(err)
	}
}
