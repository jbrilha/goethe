package db

import (
	"database/sql"
	"log"
	"time"

	"goethe/data"

	_ "github.com/lib/pq"
)

func InsertUserAccount(u *data.User) (int, error) {
	query := `INSERT INTO user_account(username, email, password, created_at)
                VALUES($1, $2, $3, $4)
                RETURNING id`

	var pk int

	err := db.QueryRow(query, u.Username, u.Email, u.Password, u.CreatedAt).Scan(&pk)
	if err != nil {
		log.Println(err)
		return 0, err
	}

	u.ID = pk
	return pk, nil
}

func GetUserAccountByUsername(username string) (data.User, error) {
	query := `SELECT id, username, email, created_at FROM user_account WHERE username = $1`

	user := data.User{}

    err := db.QueryRow(query, username).Scan(
        &user.ID,
        &user.Username,
        &user.Email,
        // &user.Password,
        &user.CreatedAt,
    )
	if err != nil {
		if err == sql.ErrNoRows {
			log.Println(err)
			return data.User{}, err
		}
		log.Println("other err:", err)
		return data.User{}, err
	}

	return user, nil
}

func GetUserAccountByID(id int) (data.User, error) {
	query := `SELECT * FROM user_account WHERE id = $1`

	user := data.User{}

    err := db.QueryRow(query, id).Scan(
        &user.ID,
        &user.Username,
        &user.Email,
        &user.Password,
        &user.CreatedAt,
    )

	if err != nil {
		if err == sql.ErrNoRows {
			log.Println(err)
			return data.User{}, err
		}
		log.Println("other err:", err)
		return data.User{}, err
	}

	return user, nil
}

func GetUserAccounts() []data.User {
	query := `SELECT * FROM user_account`

	var id int
	var username string
	var password string
	var email string
	var createdAt time.Time

	rows, err := db.Query(query)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Fatalf("nooooooooo roooooooooooows")
		}
		log.Fatal(err)
	}

	defer rows.Close()

	posts := []data.User{}

	for rows.Next() {
        err := rows.Scan(&id, &username, &password, &email, &createdAt)
		if err != nil {
			log.Fatal(err)
		}

		posts = append(posts, data.User{
			ID:        id,
			Password:  password,
			Username:  username,
			Email:     email,
			CreatedAt: createdAt,
		})
	}

	return posts
}

func UserAccountExists(un string) (bool, error) {
	query := `SELECT EXISTS(SELECT 1 FROM user_account WHERE username = $1)`

	var exists bool

	err := db.QueryRow(query, un).Scan(&exists)
	if err != nil {
		log.Println(err)
		return false, err
	}

	return exists, nil
}

func createUserTable() {
	// db.Exec("DROP TABLE user_account")
	query := `CREATE TABLE IF NOT EXISTS user_account(
                id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                username VARCHAR NOT NULL UNIQUE,
                email VARCHAR NOT NULL,
                password VARCHAR NOT NULL,
                created_at timestamp NOT NULL
    )`

	_, err := db.Exec(query)
	if err != nil {
		log.Println(err)
	}
}
